// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(KickerContext))]
    partial class KickerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Auth.AuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MarkToDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthInfos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AuthInfo");
                });

            modelBuilder.Entity("DAL.Entities.Battle.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BattleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("BattleTimeSeconds")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsWinnerA")
                        .HasColumnType("boolean");

                    b.Property<int>("LoserGoalsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MarkToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("DAL.Entities.Battle.UserBattle", b =>
                {
                    b.Property<Guid>("BattleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInitiator")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.HasKey("BattleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBattles", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.StatsOneVsOne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BattlesCount")
                        .HasColumnType("integer");

                    b.Property<int>("ELO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<int>("GoalsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("MarkToDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WinsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StatsOneVsOnes");
                });

            modelBuilder.Entity("DAL.Entities.StatsTwoVsTwo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BattlesCountInAttack")
                        .HasColumnType("integer");

                    b.Property<int>("BattlesCountInDefense")
                        .HasColumnType("integer");

                    b.Property<int>("ELO")
                        .HasColumnType("integer");

                    b.Property<bool>("MarkToDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WinsCountInAttack")
                        .HasColumnType("integer");

                    b.Property<int>("WinsCountInDefense")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StatsTwoVsTwos");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("MarkToDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.Auth.AuthInfoFirebase", b =>
                {
                    b.HasBaseType("DAL.Entities.Auth.AuthInfo");

                    b.Property<string>("FirebaseUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AuthInfoFirebase");
                });

            modelBuilder.Entity("DAL.Entities.Auth.AuthInfoMail", b =>
                {
                    b.HasBaseType("DAL.Entities.Auth.AuthInfo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("RefreshTokens")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("AuthInfoMail");
                });

            modelBuilder.Entity("DAL.Entities.Auth.AuthInfo", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("AuthInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Battle.UserBattle", b =>
                {
                    b.HasOne("DAL.Entities.Battle.Battle", "Battle")
                        .WithMany("UserBattles")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserBattles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.StatsOneVsOne", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("StatsOneVsOne")
                        .HasForeignKey("DAL.Entities.StatsOneVsOne", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.StatsTwoVsTwo", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("StatsTwoVsTwo")
                        .HasForeignKey("DAL.Entities.StatsTwoVsTwo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Battle.Battle", b =>
                {
                    b.Navigation("UserBattles");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("AuthInfos");

                    b.Navigation("StatsOneVsOne");

                    b.Navigation("StatsTwoVsTwo");

                    b.Navigation("UserBattles");
                });
#pragma warning restore 612, 618
        }
    }
}
